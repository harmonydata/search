"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[649],{42649:(e,t,a)=>{a.d(t,{AV:()=>u,Dd:()=>s,Hu:()=>n,Pn:()=>c,Qf:()=>l,S6:()=>m,U4:()=>d,Y3:()=>h,_u:()=>f,dh:()=>g,v5:()=>i,w3:()=>r});let o="https://harmonydataweaviate.azureedge.net";async function s(){let e=await fetch("".concat(o,"/discover/aggregate"),{method:"GET"});if(!e.ok){let t=await e.text();throw console.error("fetchAggregateFilters error. Status:",e.status,"Response:",t),Error("Failed to fetch aggregate filters")}let t=await e.json();window.__lastAggregateResponse=t,console.log("Aggregate API response cached in window.__lastAggregateResponse for debugging"),console.log("Aggregate response:",{aggregationKeys:Object.keys(t.aggregations||{}),sampleKeys:Object.keys(t.aggregations||{}).slice(0,3).map(e=>({key:e,value:t.aggregations[e]}))});let a=t.aggregations||{};return Object.keys(a).map(e=>{let t;let o=a[e];if(["num_sweeps","num_variables","sample_size","duration_years","age_lower","age_upper","start_year","end_year"].includes(e)&&"object"==typeof o&&!Array.isArray(o)&&void 0!==o.minimum&&void 0!==o.maximum){let e=Math.floor(o.minimum),a=Math.ceil(o.maximum),s=[],n=Math.min(100,a-e+1),r=(a-e)/(n-1);for(let t=0;t<n;t++)s.push(String(Math.round(e+t*r)));t=s}else t=Object.keys(o);return{id:e,label:e.split("_").map(e=>e.charAt(0).toUpperCase()+e.slice(1).toLowerCase()).join(" "),options:t,frequencies:"object"!=typeof o||Array.isArray(o)?void 0:o}})}async function n(e,t){var a,s;let n,r,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:40,l=!(arguments.length>4)||void 0===arguments[4]||arguments[4],d=arguments.length>5?arguments[5]:void 0,h=arguments.length>6?arguments[6]:void 0,u=arguments.length>7?arguments[7]:void 0,g=arguments.length>8?arguments[8]:void 0,p=t&&Object.keys(t).length>0;if(!e&&!p)return{results:[],aggregations:{},num_hits:0};let f=e&&""!==e.trim()?e.trim():"",m=h&&h.length>0&&!l,w=l?"search2":"search",y="".concat(o,"/discover/").concat(w);if(m){n=y;let e={query:[f],num_results:c},a=void 0!==u?u:(i-1)*c;e.offset=a,void 0!==d&&(e.alpha=d),e.top_level_ids_seen_so_far=h,t&&Object.entries(t).forEach(t=>{let[a,o]=t;o.length>0&&(a.endsWith("_min")||a.endsWith("_max")?e[a]=parseInt(o[0],10):e[a]=o)}),void 0!==g&&(e.return_variables_within_parent=g),r={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},console.log("Using POST request for pagination with body:",{query:[f],topLevelIdsCount:h.length,offset:a,endpoint:w})}else{let e=new URLSearchParams;void 0!==d&&e.set("alpha",d.toString()),e.append("query",f);let a=void 0!==u?u:(i-1)*c;e.set("num_results",c.toString()),e.set("offset",a.toString());let o={};if(t)for(let a in t)if(a.endsWith("_min")||a.endsWith("_max")){let s=a.replace(/_(min|max)$/,"");o[s]||(o[s]={}),a.endsWith("_min")?o[s].min=t[a][0]:o[s].max=t[a][0],e.append(a,t[a][0])}else t[a].forEach(t=>{e.append(a,t)});void 0!==g&&e.set("return_variables_within_parent",g.toString()),n="".concat(y,"?").concat(e.toString()),r={method:"GET"},Object.keys(o).length>0&&console.log("Numeric range parameters:",o),console.log("Using GET request:",n)}let _=await fetch(n,r);if(!_.ok)throw console.error("Search API error:",_.status,await _.text()),Error("Search API request failed");let v=await _.json();return window.__lastSearchResponse=v,console.log("Search API response cached in window.__lastSearchResponse for debugging"),console.log("Search results:",{totalHits:v.num_hits,resultCount:(null===(a=v.results)||void 0===a?void 0:a.length)||0,firstResult:null===(s=v.results)||void 0===s?void 0:s[0],aggregations:Object.keys(v.aggregations||{}),endpoint:w,method:m?"POST":"GET",hybridWeight:d}),{results:v.results||[],aggregations:v.aggregations||{},num_hits:v.num_hits,top_level_ids_seen_so_far:v.top_level_ids_seen_so_far||[],next_page_offset:v.next_page_offset}}async function r(e,t,a){let s=new URLSearchParams;s.set("uuid",e),t&&t.trim()&&s.set("query",t.trim()),void 0!==a&&s.set("alpha",a.toString());let n="".concat(o,"/discover/lookup?").concat(s.toString()),r=await fetch(n);if(!r.ok)throw console.error("Failed to fetch result by UUID:",r.statusText),Error("Failed to fetch result by UUID: ".concat(r.statusText));let i=await r.json();return window.__lastLookupResponse=i,i.results[0]}async function i(e){let t=function(e){if(!e||"string"!=typeof e)return e;if(e.endsWith(")")){let t=(e.match(/\(/g)||[]).length,a=(e.match(/\)/g)||[]).length;if(a>t){let o=a-t,s=e;for(let e=0;e<o;e++)s.endsWith(")")&&(s=s.slice(0,-1));return s!==e&&console.log('Cleaned URL: "'.concat(e,'" -> "').concat(s,'" (removed ').concat(o," extra closing brackets)")),s}}return e}(e),a=await fetch("https://harmonydata.azureedge.net/api/ogData?url=".concat(encodeURIComponent(t)));if(!a.ok)throw Error("Failed to fetch OpenGraph data");return a.json()}async function c(){let e=await fetch("".concat(o,"/info/version"));if(!e.ok)throw console.error("Failed to fetch version info:",e.statusText),Error("Failed to fetch version info");let t=await e.json();return window.__lastVersionResponse=t,console.log("Version API response cached in window.__lastVersionResponse for debugging"),t}async function l(){let e=await fetch("".concat(o,"/discover/get-keyword-phrases"));if(!e.ok)throw console.error("Failed to fetch keyword phrases:",e.statusText),Error("Failed to fetch keyword phrases");let t=await e.json();return window.__lastKeywordPhrasesResponse=t,console.log("Keyword phrases API response cached in window.__lastKeywordPhrasesResponse for debugging"),t}async function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new URLSearchParams;Object.entries(e).forEach(e=>{let[a,o]=e;o.length>0&&o.forEach(e=>{t.append(a,e)})});let a=await fetch("".concat(o,"/discover/aggregate?").concat(t.toString()),{headers:{accept:"application/json"}});if(!a.ok)throw Error("Failed to fetch aggregate data");return a.json()}async function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new URLSearchParams;Object.entries(e).forEach(e=>{let[a,o]=e;o.length>0&&o.forEach(e=>{t.append(a,e)})});let a=await fetch("".concat(o,"/discover/get_numeric_values?").concat(t.toString()),{headers:{accept:"application/json"}});if(!a.ok)throw Error("Failed to fetch numeric values");return a.json()}async function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new URLSearchParams;Object.entries(e).forEach(e=>{let[a,o]=e;o.length>0&&o.forEach(e=>{t.append(a,e)})});let a=await fetch("".concat(o,"/discover/get_word_cloud?").concat(t.toString()),{headers:{accept:"application/json"}});if(!a.ok)throw Error("Failed to fetch word cloud data");return a.json()}async function g(){let e=await fetch("".concat(o,"/discover/sources"),{headers:{accept:"application/json"}});if(!e.ok)throw Error("Failed to fetch sources data");return e.json()}let p={summarise_URL:"You are a helpful assistant that summarizes academic research datasets. You will receive a JSON object containing dataset schema information including metadata and other details. The dataset may include a variableCount field indicating the number of variables measured. Please provide a concise, informative summary that highlights the key aspects of the dataset, including its purpose, scope, the types of variables measured (based on the count and other metadata), and any other relevant information that would help researchers understand what this dataset contains.",summarise_text:"You are a helpful assistant that summarizes academic research datasets. You will receive a JSON object containing dataset schema information including metadata and other details. The dataset may include a variableCount field indicating the number of variables measured. Please provide a concise, informative summary that highlights the key aspects of the dataset, including its purpose, scope, the types of variables measured (based on the count and other metadata), and any other relevant information that would help researchers understand what this dataset contains."};async function f(e,t){let a=p[t],o=JSON.stringify(e,null,2),s=await fetch("https://harmonyplugincleanuptext.fastdatascience.com/api/cleanup",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:o,system:a})});if(!s.ok)throw Error("Cleanup API request failed: ".concat(s.statusText));let n=await s.json();return{result:n.result||n,type:t}}async function m(e){let t=new URL("https://harmonydatagpt.azureedge.net/api/cleanup");t.searchParams.set("text",e),t.searchParams.set("system","You are a helpful assistant that summarizes academic research studies and datasets based on your knowledge. You will receive the name/title of a study or dataset. Please provide a concise, informative summary based on what you know about this study, including its purpose, scope, methodology, key findings, and significance. IMPORTANT: Only provide a summary if you have specific knowledge about this exact study or dataset. If the name is too generic (like 'Next Steps', 'Study', 'Survey', etc.) or if you are not familiar with the specific study, return an empty response (no text at all). Do not provide general information or explanations about why you cannot help.");let a=await fetch(t.toString(),{method:"GET",headers:{Accept:"application/json"}});if(!a.ok)throw Error("Cleanup API request failed: ".concat(a.statusText));let o=await a.json();return{result:o.result||o,type:"summarise_text"}}}}]);